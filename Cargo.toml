[workspace]
members = [
    ".",
    "fuzz",
    "rama-cli",
    "rama-core",
    "rama-dns",
    "rama-error",
    "rama-haproxy",
    "rama-http",
    "rama-http-backend",
    "rama-http-core",
    "rama-http-core/tests/h2-fuzz",
    "rama-http-core/tests/h2-support",
    "rama-http-types",
    "rama-macros",
    "rama-net",
    "rama-proxy",
    "rama-socks5",
    "rama-tcp",
    "rama-tls",
    "rama-ua",
    "rama-udp",
    "rama-utils",
]

[workspace.package]
version = "0.2.0-alpha.7"
license = "MIT OR Apache-2.0"
edition = "2024"
repository = "https://github.com/plabayo/rama"
homepage = "https://ramaproxy.org"
keywords = ["io", "async", "non-blocking", "service", "rama"]
categories = ["asynchronous", "network-programming", "web-programming", "web-programming::http-client", "web-programming::http-server"]
authors = ["Glen De Cauwsemaecker <glen@plabayo.tech>"]
rust-version = "1.85.0"

[workspace.dependencies]
async-compression = "0.4"
base64 = "0.22"
bitflags = "2.4"
md5 = "0.7.0"
brotli = "7"
bytes = "1"
clap = { version = "4.5.15", features = ["derive"] }
crossterm = "0.27"
csv = "1.3.1"
flate2 = "1.0"
futures-lite = "2.3.0"
futures-core = "0.3"
futures = "0.3"
h2 = "0.4"
headers = "0.4"
moka = "0.12.8"
hex = "0.4"
http = "1"
http-body = "1"
http-body-util = "0.1"
http-range-header = "0.4.0"
httpdate = "1.0"
boring = "4.9.1"
tokio-boring = "4.9.1"
ipnet = "2.9.0"
libfuzzer-sys = "0.4"
honggfuzz = "0.5.56"
itertools = "0.14.0"
mime = "0.3.17"
mime_guess = { version = "2", default-features = false }
paste = "1.0"
percent-encoding = "2.1"
pin-project-lite = "0.2.13"
rustls-pki-types = "^1"
proc-macro2 = "1.0"
socket2 = "0.5.8"
opentelemetry = { version = "0.28.0", default-features = false, features = [
    "trace",
] }
nom = "8.0.0"
opentelemetry-otlp = { version = "0.28.0", features = ["tokio"] }
opentelemetry_sdk = { version = "0.28.0", default-features = false, features = [
    "trace",
    "rt-tokio",
] }
opentelemetry-semantic-conventions = { version = "0.28", features = [
    "semconv_experimental",
] }
quickcheck = "1.0"
quote = "1.0"
rcgen = "0.13.0"
regex = "1.10.3"
rustls = { version = "0.23", default-features = false, features = [
    "logging",
    "std",
    "tls12",
    "aws_lc_rs",
] }
derive_more = "2.0.1"
rustls-native-certs = "0.8.0"
rustls-pemfile = "2.1"
rustversion = "1.0.9"
serde = "1.0"
serde_json = "1.0"
serde_html_form = "0.2"
syn = "2.0"
sync_wrapper = "1.0"
tempfile = "3.10"
tokio = "1.38"
spmc = "0.3"
tokio-graceful = "0.2"
tokio-rustls = { version = "0.26", default-features = false, features = [
    "logging",
    "tls12",
    "aws_lc_rs",
] }
tokio-test = "0.4.4"
tokio-util = "0.7"
tracing = "0.1"
tracing-subscriber = "0.3.17"
tracing-tree = "0.4.0"
trybuild = "1.0.98"
uuid = "1.6"
nanoid = "0.4.0"
zstd = "0.13"
venndb = "0.5.0"
unicode-normalization = "0.1.23"
iri-string = "0.7.0"
escargot = "0.5.12"
divan = "0.1.14"
webpki-roots = "0.26.1"
terminal-prompt = "0.2.3"
parking_lot = "0.12.3"
const_format = "0.2.32"
hickory-resolver = { version = "0.24.1", default-features = false, features = [
    "tokio-runtime",
] }
arc-swap = "1.7.1"
flume = "0.11.1"
atomic-waker = "1.0.0"
futures-sink = "0.3"
fnv = "1.0.5"
slab = "0.4.2"
indexmap = "2"
rand = "0.9.0"
walkdir = "2.3.2"
env_logger = "0.11.6"
httparse = "1.8"
smallvec = { version = "1.12", features = ["const_generics", "const_new"] }
itoa = "1"
want = "0.3"
futures-util = "0.3"
futures-channel = "0.3"
sha2 = "0.10.8"
jemallocator = { package = "tikv-jemallocator", version = "0.6" }
mimalloc = { version = "0.1.39", default-features = false }

[workspace.lints.rust]
unreachable_pub = "deny"
elided_lifetimes_in_paths = "allow"
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
todo = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
mem_forget = "warn"
unused_self = "warn"
filter_map_next = "warn"
needless_continue = "warn"
needless_borrow = "warn"
match_wildcard_for_single_variants = "warn"
if_let_mutex = "warn"
await_holding_lock = "warn"
match_on_vec_items = "warn"
imprecise_flops = "warn"
suboptimal_flops = "warn"
lossy_float_literal = "warn"
rest_pat_in_fully_bound_structs = "warn"
fn_params_excessive_bools = "warn"
exit = "warn"
inefficient_to_string = "warn"
linkedlist = "warn"
macro_use_imports = "warn"
option_option = "warn"
verbose_file_reads = "warn"
unnested_or_patterns = "warn"
str_to_string = "warn"
type_complexity = "allow"

[package]
name = "rama"
readme = "README.md"
documentation = "https://docs.rs/rama"
description = "modular service framework"
version = { workspace = true }
license = { workspace = true }
edition = { workspace = true }
repository = { workspace = true }
homepage = { workspace = true }
keywords = { workspace = true }
categories = { workspace = true }
authors = { workspace = true }
rust-version = { workspace = true }
resolver = "3"

[lints]
workspace = true

[features]
default = []
full = [
    "telemetry",
    "compression",
    "rustls",
    "boring",
    "cli",
    "tcp",
    "http-full",
    "proxy-full",
]
telemetry = ["rama-core/telemetry", "rama-net/telemetry", "rama-http/telemetry"]
compression = ["http", "rama-http/compression"]
tls = ["net", "dep:rama-tls", "rama-net/tls", "rama-http/tls", "rama-http-backend/tls"]
rustls = ["tls", "rama-tls/rustls", "rama-net/rustls", "rama-http-backend/rustls"]
boring = ["tls", "rama-tls/boring", "rama-net/boring", "rama-http-backend/boring"]
cli = ["dep:base64", "dep:bytes", "dep:hex", "dep:serde_json", "dep:serde_html_form", "dep:tracing", "dep:tokio", "http"]
net = ["dep:rama-net"]
dns = ["net", "dep:rama-dns"]
tcp = ["dns", "dep:rama-tcp"]
http = ["net", "dep:rama-http", "net", "ua", "rama-net/http", "rama-tcp/http"]
http-full = ["http", "tcp", "dep:rama-http-backend", "dep:rama-http-core"]
proxy = ["dep:rama-proxy"]
haproxy = ["dep:rama-haproxy"]
ua = ["dep:rama-ua"]
proxy-memory-db = ["proxy", "rama-proxy/memory-db", "rama-net/venndb"]
proxy-live-update = ["proxy", "rama-proxy/live-update"]
proxy-csv = ["proxy", "rama-proxy/csv"]
proxy-full = ["proxy-memory-db", "proxy-live-update", "proxy-csv", "haproxy"]

[build-dependencies]
rustversion = { workspace = true }

[dependencies]
base64 = { workspace = true, optional = true }
bytes = { workspace = true, optional = true }
hex = { workspace = true, optional = true }
rama-core = { version = "0.2.0-alpha.7", path = "rama-core" }
rama-dns = { version = "0.2.0-alpha.7", path = "rama-dns", optional = true }
rama-haproxy = { version = "0.2.0-alpha.7", path = "rama-haproxy", optional = true }
rama-http = { version = "0.2.0-alpha.7", path = "rama-http", optional = true }
rama-http-backend = { version = "0.2.0-alpha.7", path = "rama-http-backend", optional = true }
rama-http-core = { version = "0.2.0-alpha.7", path = "rama-http-core", optional = true }
rama-net = { version = "0.2.0-alpha.7", path = "rama-net", optional = true }
rama-proxy = { version = "0.2.0-alpha.7", path = "rama-proxy", optional = true }
rama-tcp = { version = "0.2.0-alpha.7", path = "rama-tcp", optional = true }
rama-tls = { version = "0.2.0-alpha.7", path = "rama-tls", optional = true }
rama-ua = { version = "0.2.0-alpha.7", path = "rama-ua", optional = true }
rama-utils = { version = "0.2.0-alpha.7", path = "rama-utils" }
serde_html_form = { workspace = true, optional = true }
serde_json = { workspace = true, optional = true }
tokio = { workspace = true, features = ["macros", "io-std"], optional = true }
tracing = { workspace = true, optional = true }

[dev-dependencies]
bytes = { workspace = true }
derive_more = { workspace = true, features = ["as_ref"] }
divan = { workspace = true }
escargot = { workspace = true }
futures = { workspace = true }
futures-channel = { workspace = true }
futures-util = { workspace = true }
h2-support = { path = "rama-http-core/tests/h2-support" }
http = { workspace = true }
itertools = { workspace = true }
opentelemetry-otlp = { workspace = true, features = ["grpc-tonic"] }
opentelemetry_sdk = { workspace = true }
pin-project-lite = { workspace = true }
regex = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_html_form = { workspace = true }
serde_json = { workspace = true }
spmc = { workspace = true }
tokio = { workspace = true, features = ["macros"] }
tokio-test = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true, features = ["env-filter"] }

[profile.dev.package."*"]
opt-level = 3

[profile.dev]
debug = false
opt-level = 1

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[[bench]]
name = "ua_parse"
harness = false

[[bench]]
name = "h2"
harness = false

[[bench]]
name = "http_core_body"
path = "benches/http_core_body.rs"
required-features = ["full"]
harness = false

[[bench]]
name = "http_core_connect"
path = "benches/http_core_connect.rs"
required-features = ["full"]
harness = false

[[bench]]
name = "http_core_end_to_end"
path = "benches/http_core_end_to_end.rs"
required-features = ["full"]
harness = false

[[bench]]
name = "http_core_pipeline"
path = "benches/http_core_pipeline.rs"
required-features = ["full"]
harness = false

[[bench]]
name = "http_core_server"
path = "benches/http_core_server.rs"
required-features = ["full"]
harness = false

[[example]]
name = "http_conn_state"
required-features = ["http-full"]

[[example]]
name = "http_connect_proxy"
required-features = ["http-full"]

[[example]]
name = "http_form"
required-features = ["http-full"]

[[example]]
name = "http_health_check"
required-features = ["http-full"]

[[example]]
name = "http_high_level_client"
required-features = ["compression", "http-full"]

[[example]]
name = "http_k8s_health"
required-features = ["http-full"]

[[example]]
name = "http_key_value_store"
required-features = ["compression", "http-full"]

[[example]]
name = "http_listener_hello"
required-features = ["http-full"]

[[example]]
name = "http_mitm_proxy"
required-features = ["http-full"]

[[example]]
name = "http_rate_limit"
required-features = ["http-full"]

[[example]]
name = "http_service_fs"
required-features = ["http-full"]

[[example]]
name = "http_service_hello"
required-features = ["compression", "http-full"]

[[example]]
name = "http_service_match"
required-features = ["http-full"]

[[example]]
name = "http_telemetry"
required-features = ["http-full", "telemetry"]

[[example]]
name = "http_user_agent_classifier"
required-features = ["http-full"]

[[example]]
name = "http_web_service_dir_and_api"
required-features = ["compression", "http-full"]

[[example]]
name = "https_connect_proxy"
required-features = ["http-full", "rustls"]

[[example]]
name = "mtls_tunnel_and_service"
required-features = ["http-full", "rustls"]

[[example]]
name = "tcp_listener_hello"
required-features = ["tcp"]

[[example]]
name = "tcp_listener_layers"
required-features = ["tcp"]

[[example]]
name = "tls_boring_dynamic_certs"
required-features = ["boring", "http-full"]

[[example]]
name = "tls_boring_termination"
required-features = ["boring", "haproxy", "http-full"]

[[example]]
name = "tls_termination"
required-features = ["rustls", "haproxy", "http-full"]

[profile.release]
codegen-units = 1
incremental = false

[profile.bench]
codegen-units = 1
incremental = false
