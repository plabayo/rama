name: Build Rama CLI Releases
on:
  push:
    tags:
      - rama-*
  workflow_dispatch:
    inputs:
      tag:
        description: "Release Tag"
        required: true
        type: string
      build_linux:
        description: "Build Linux"
        required: true
        type: boolean
        default: true
      build_macos:
        description: "Build macOS"
        required: true
        type: boolean
        default: true
      build_windows:
        description: "Build Windows"
        required: true
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable

jobs:
  build-release-linux:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_linux }}
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: true
      matrix:
        target:
          - name: x86_64-unknown-linux-gnu
          - name: aarch64-unknown-linux-gnu
          - name: armv7-unknown-linux-gnueabi
          - name: armv7-unknown-linux-gnueabihf
          - name: arm-unknown-linux-gnueabi
          - name: arm-unknown-linux-gnueabihf

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          targets: ${{ matrix.target.name }}

      - uses: Swatinem/rust-cache@v2
        with:
          env-vars: "RUST_TOOLCHAIN=${{env.RUST_TOOLCHAIN}}"

      - name: Install cross
        run: |
          cargo install --git https://github.com/cross-rs/cross --branch main cross

      - name: Install bindgen-cli
        run: |
          cargo install --force --locked bindgen-cli

      - name: Build release
        timeout-minutes: 120
        run: |
          cross build --release -p rama-cli --target ${{ matrix.target.name }}

      - name: Package
        run: |
          cd target/${{ matrix.target.name }}/release && tar -cJf rama.${{ matrix.target.name }}.tar.xz rama

      - name: Generate checksums
        run: |
          cd target/${{ matrix.target.name }}/release
          sha256sum rama.${{ matrix.target.name }}.tar.xz > rama.${{ matrix.target.name }}.tar.xz.sha256

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.target.name }}/release/*.tar.xz
            target/${{ matrix.target.name }}/release/*.sha256
          prerelease: ${{ contains(github.ref_name, '-') }}
          tag_name: ${{ inputs.tag || github.ref_name }}

  build-release-macos:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_macos }}
    runs-on: macos-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4

      - name: Install GNU tar
        if: runner.os == 'macOS'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{env.RUST_TOOLCHAIN}}
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          env-vars: "RUST_TOOLCHAIN=${{env.RUST_TOOLCHAIN}}"

      - name: Build and Sign
        run: |
          bash ./rama-cli/scripts/build_and_sign_macos.sh ${{ matrix.target }}
        env:
          MACOS_CERT_P12: ${{ secrets.MACOS_CERT_P12 }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
          MACOS_CERT_COMMON_NAME: ${{ secrets.MACOS_CERT_COMMON_NAME }}
          AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY: ${{ secrets.AC_API_KEY }}

      - name: Package
        run: |
          cd target/${{ matrix.target }}/release && tar -cJf rama.${{ matrix.target }}.tar.xz rama

      - name: Generate checksums
        run: |
          cd target/${{ matrix.target }}/release
          shasum -a 256 rama.${{ matrix.target }}.tar.xz > rama.${{ matrix.target }}.tar.xz.sha256

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.target }}/release/*.tar.xz
            target/${{ matrix.target }}/release/*.sha256
          prerelease: ${{ contains(github.ref_name, '-') }}
          tag_name: ${{ inputs.tag || github.ref_name }}

  build-release-windows:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_windows }}
    runs-on: windows-latest
    env:
      RUST_BACKTRACE: full
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-pc-windows-msvc

    steps:
      - uses: ilammy/setup-nasm@v1
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          env-vars: "RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }}"

      - name: Build release (Windows)
        shell: bash
        run: |
          cargo build --release -p rama-cli --target ${{ matrix.target }}

      - name: upload-unsigned-artifact
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          path: "target/${{ matrix.target }}/release/rama.exe"

      - id: optional_step_id
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: "${{ secrets.SIGNPATH_API_TOKEN }}"
          organization-id: "177e81da-21f7-469e-823f-a924bcc9f474"
          project-slug: "rama"
          signing-policy-slug: "release-signing"
          github-artifact-id: "${{ steps.upload-unsigned-artifact.outputs.artifact-id }}"
          wait-for-completion: true
          output-artifact-directory: "target/${{ matrix.target }}/release"

      - name: Package (zip)
        shell: pwsh
        run: |
          $BinPath = "target/${{ matrix.target }}/release"
          $Exe     = Join-Path $BinPath "rama.exe"
          if (!(Test-Path $Exe)) { throw "Binary not found: $Exe" }
          $Zip = Join-Path $BinPath "rama.${{ matrix.target }}.zip"
          if (Test-Path $Zip) { Remove-Item $Zip }
          Compress-Archive -Path $Exe -DestinationPath $Zip -Force

      - name: Generate checksums
        shell: pwsh
        run: |
          $BinPath = "target/${{ matrix.target }}/release"
          $Zip     = Join-Path $BinPath "rama.${{ matrix.target }}.zip"
          $Hash    = (Get-FileHash -Path $Zip -Algorithm SHA256).Hash.ToLower()
          Set-Content -NoNewline -Path "$Zip.sha256" -Value "$Hash  $(Split-Path -Leaf $Zip)`n"

      - name: Upload Github Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.target }}/release/*.zip
            target/${{ matrix.target }}/release/*.sha256
          prerelease: ${{ contains(github.ref_name, '-') }}
          tag_name: ${{ inputs.tag || github.ref_name }}
